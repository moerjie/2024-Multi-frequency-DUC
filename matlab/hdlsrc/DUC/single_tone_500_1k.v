// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\single_tone_500_1k.v
// Created: 2025-01-12 11:22:58
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: single_tone_500_1k
// Source Path: DUC/Signal_Source_module/single_tone_500_1k
// Hierarchy Level: 1
// Model version: 3.30
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module single_tone_500_1k
          (clk,
           rst_n,
           enb,
           SIGNAL,
           VLD);


  input   clk;
  input   rst_n;
  input   enb;
  output  signed [15:0] SIGNAL;  // sfix16_En15
  output  VLD;


  wire signed [15:0] kconst;  // sfix16_En16
  reg signed [15:0] kconst_1;  // sfix16_En16
  wire [31:0] Constant5_out1;  // uint32
  wire [15:0] count_step;  // uint16
  wire [15:0] count_from_1;  // uint16
  reg [15:0] Counter_Limited1_out1;  // uint16
  wire [15:0] count;  // uint16
  wire needToWrap;
  wire [15:0] count_value;  // uint16
  wire [15:0] Constant3_out1;  // uint16
  wire Relational_Operator1_out1;
  wire signed [15:0] NCO1_out1;  // sfix16_En15
  wire NCO1_out2;
  reg signed [15:0] NCO1_out1_1;  // sfix16_En15
  wire signed [31:0] Gain_mul_temp;  // sfix32_En31
  wire signed [15:0] Gain_out1;  // sfix16_En15
  reg signed [15:0] Gain_out1_1;  // sfix16_En15
  wire signed [15:0] kconst_2;  // sfix16_En16
  reg signed [15:0] kconst_3;  // sfix16_En16
  wire [31:0] Constant6_out1;  // uint32
  wire signed [15:0] NCO2_out1;  // sfix16_En15
  reg signed [15:0] NCO2_out1_1;  // sfix16_En15
  wire signed [31:0] Gain1_mul_temp;  // sfix32_En31
  wire signed [15:0] Gain1_out1;  // sfix16_En15
  reg signed [15:0] Gain1_out1_1;  // sfix16_En15
  wire signed [31:0] Add_add_cast;  // sfix32_En15
  wire signed [31:0] Add_add_cast_1;  // sfix32_En15
  wire signed [31:0] Add_add_temp;  // sfix32_En15
  wire signed [15:0] Add_out1;  // sfix16_En15


  assign kconst = 16'sb0111110101110001;

  always @(posedge clk)
    begin : HwModeRegister_process
      if (rst_n == 1'b0) begin
        kconst_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end

  assign Constant5_out1 = 32'b00000000010101010101010101010110;
  assign count_step = 16'b0000000000000001;
  assign count_from_1 = 16'b0000000000000000;
  assign count = Counter_Limited1_out1 + count_step;
  assign needToWrap = Counter_Limited1_out1 >= 16'b0000100111000011;
  assign count_value = (needToWrap == 1'b0 ? count :
              count_from_1);
  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2499
  always @(posedge clk)
    begin : Counter_Limited1_process
      if (rst_n == 1'b0) begin
        Counter_Limited1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Counter_Limited1_out1 <= count_value;
        end
      end
    end
  assign Constant3_out1 = 16'b0000100111000011;
  assign Relational_Operator1_out1 = Counter_Limited1_out1 == Constant3_out1;
  NCO1 u_NCO1 (.clk(clk),
               .rst_n(rst_n),
               .enb(enb),
               .inc(Constant5_out1),  // uint32
               .validIn(Relational_Operator1_out1),
               .sine(NCO1_out1),  // sfix16_En15
               .validOut(NCO1_out2)
               );
  always @(posedge clk)
    begin : HwModeRegister1_process
      if (rst_n == 1'b0) begin
        NCO1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          NCO1_out1_1 <= NCO1_out1;
        end
      end
    end

  assign Gain_mul_temp = kconst_1 * NCO1_out1_1;
  assign Gain_out1 = Gain_mul_temp[31:16];
  always @(posedge clk)
    begin : PipelineRegister_process
      if (rst_n == 1'b0) begin
        Gain_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end

  assign kconst_2 = 16'sb0111110101110001;

  always @(posedge clk)
    begin : HwModeRegister2_process
      if (rst_n == 1'b0) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end

  assign Constant6_out1 = 32'b00000000001010101010101010101011;
  NCO2 u_NCO2 (.clk(clk),
               .rst_n(rst_n),
               .enb(enb),
               .inc(Constant6_out1),  // uint32
               .validIn(Relational_Operator1_out1),
               .sine(NCO2_out1)  // sfix16_En15
               );
  always @(posedge clk)
    begin : HwModeRegister3_process
      if (rst_n == 1'b0) begin
        NCO2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          NCO2_out1_1 <= NCO2_out1;
        end
      end
    end

  assign Gain1_mul_temp = kconst_3 * NCO2_out1_1;
  assign Gain1_out1 = Gain1_mul_temp[31:16];
  always @(posedge clk)
    begin : PipelineRegister1_process
      if (rst_n == 1'b0) begin
        Gain1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end

  assign Add_add_cast = {{16{Gain_out1_1[15]}}, Gain_out1_1};
  assign Add_add_cast_1 = {{16{Gain1_out1_1[15]}}, Gain1_out1_1};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp[15:0];
  assign SIGNAL = Add_out1;

  assign VLD = NCO1_out2;

endmodule  // single_tone_500_1k


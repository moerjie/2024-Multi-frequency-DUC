// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\DUC_module.v
// Created: 2025-03-25 14:21:11
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8.33333e-09
// Target subsystem base rate: 8.33333e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// DATA_OUT                      ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DUC_module
// Source Path: DUC/DUC_module
// Hierarchy Level: 0
// Model version: 3.79
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DUC_module
          (clk,
           rst_n,
           clk_enable,
           DATA_IN,
           RST,
           ce_out,
           DATA_OUT);


  input   clk;
  input   rst_n;
  input   clk_enable;
  input   signed [15:0] DATA_IN;  // sfix16_En15
  input   RST;
  output  ce_out;
  output  signed [15:0] DATA_OUT;  // sfix16_En14


  wire enb;
  wire enb_1_625_1;
  wire enb_1_625_0;
  wire enb_1_1_1;
  reg signed [15:0] DATA_IN_1;  // sfix16_En15
  reg  RST_1;
  wire signed [15:0] HB1_out1;  // sfix16_En15
  wire HB1_out2;
  wire signed [15:0] HB2_out1;  // sfix16_En15
  wire HB2_out2;
  wire signed [15:0] CIC_COMP_out1;  // sfix16_En15
  wire signed [15:0] CIC_out1;  // sfix16_E23
  wire signed [15:0] GAIN_CORRECTION_out1;  // sfix16_En14
  reg signed [15:0] GAIN_CORRECTION_out1_1;  // sfix16_En14


  DUC_module_tc u_DUC_module_tc (.clk(clk),
                                 .rst_n(rst_n),
                                 .clk_enable(clk_enable),
                                 .enb(enb),
                                 .enb_1_1_1(enb_1_1_1),
                                 .enb_1_625_0(enb_1_625_0),
                                 .enb_1_625_1(enb_1_625_1)
                                 );

  always @(posedge clk)
    begin : in_0_pipe_in_pipe_process
      if (rst_n == 1'b0) begin
        DATA_IN_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          DATA_IN_1 <= DATA_IN;
        end
      end
    end

  always @(posedge clk)
    begin : in_1_pipe_in_pipe_process
      if (rst_n == 1'b0) begin
        RST_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          RST_1 <= RST;
        end
      end
    end

  HB1 u_HB1 (.clk(clk),
             .rst_n(rst_n),
             .enb(enb),
             .DATA_IN(DATA_IN_1),  // sfix16_En15
             .RST(RST_1),
             .HB1_DATA(HB1_out1),  // sfix16_En15
             .VLD_OUT(HB1_out2)
             );
  HB2 u_HB2 (.clk(clk),
             .rst_n(rst_n),
             .enb(enb),
             .DATA_IN(HB1_out1),  // sfix16_En15
             .RST(HB1_out2),
             .HB2_DATA(HB2_out1),  // sfix16_En15
             .VLD_OUT(HB2_out2)
             );
  CIC_COMP u_CIC_COMP (.clk(clk),
                       .rst_n(rst_n),
                       .enb(enb),
                       .enb_1_625_1(enb_1_625_1),
                       .enb_1_625_0(enb_1_625_0),
                       .DATA_IN(HB2_out1),  // sfix16_En15
                       .VLD_IN(HB2_out2),
                       .preCIC_RESAMPLE(CIC_COMP_out1)  // sfix16_En15
                       );
  CIC_block u_CIC (.clk(clk),
                   .rst_n(rst_n),
                   .enb(enb),
                   .enb_1_625_1(enb_1_625_1),
                   .enb_1_625_0(enb_1_625_0),
                   .enb_1_1_1(enb_1_1_1),
                   .DATA_IN(CIC_COMP_out1),  // sfix16_En15
                   .DATA_OUT(CIC_out1)  // sfix16_E23
                   );
  GAIN_CORRECTION u_GAIN_CORRECTION (.clk(clk),
                                     .rst_n(rst_n),
                                     .enb(enb),
                                     .DATA_IN(CIC_out1),  // sfix16_E23
                                     .DATA_OUT(GAIN_CORRECTION_out1)  // sfix16_En14
                                     );
  always @(posedge clk)
    begin : out_0_pipe_in_pipe_process
      if (rst_n == 1'b0) begin
        GAIN_CORRECTION_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          GAIN_CORRECTION_out1_1 <= GAIN_CORRECTION_out1;
        end
      end
    end

  assign DATA_OUT = GAIN_CORRECTION_out1_1;

  assign ce_out = enb_1_1_1;

endmodule  // DUC_module


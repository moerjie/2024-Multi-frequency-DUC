// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\CIC_Comp_Filter_2.v
// Created: 2025-03-17 16:40:09
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CIC_Comp_Filter_2
// Source Path: DUC/DUC_module_with_ready/CIC_Comp Filter 2
// Hierarchy Level: 1
// Model version: 3.72
// 
// Discrete FIR Filter
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_Comp_Filter_2
          (clk,
           rst_n,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   rst_n;
  input   enb;
  input   signed [15:0] dataIn;  // sfix16_En15
  input   validIn;
  output  signed [15:0] dataOut;  // sfix16_En15
  output  validOut;


  wire signed [15:0] coeff;  // sfix16_En15
  wire haltProcess;
  wire signed [15:0] dinSM;  // sfix16_En15
  wire dinVldSM;
  reg [2:0] nextDelayLineRdAddrReverse;  // ufix3
  reg [2:0] rdCountReverse_1;  // ufix3
  reg [2:0] nextDelayLineWrAddr;  // ufix3
  reg [2:0] wrCount_1;  // ufix3
  reg [2:0] nextDelayLineRdAddr;  // ufix3
  reg [2:0] rdCount_1;  // ufix3
  reg [2:0] nextSharingCount;  // ufix3
  reg [2:0] sharingCount_1;  // ufix3
  reg  delayLineValidInP;
  reg  lastPhaseStrobe;
  reg  delayLineShiftEnP;
  reg  delayLineShiftEn1_1;
  wire syncResetRst;
  reg  delayLineShiftEn2_1;
  reg  delayLineShiftEn3_1;
  reg  [6:0] validOutLookahead_reg;  // ufix1 [7]
  wire validOutLookahead_1;
  reg  vldOut_1;
  wire notValid;
  reg [2:0] rdAddr0_1;  // ufix3
  reg [2:0] rdAddr1;  // ufix3
  reg [2:0] rdAddr2;  // ufix3
  reg [2:0] rdAddr3;  // ufix3
  wire rdAddrEndNonZero;
  wire rdAddrEndZero;
  reg  [5:0] finalSumValidPipe_reg;  // ufix1 [6]
  wire accumulate;
  wire signed [32:0] accDataOut;  // sfix33_En30
  reg [2:0] wrAddrP;  // ufix3
  reg [2:0] rdAddrDelayLine0;  // ufix3
  wire signed [15:0] delayLineEnd0;  // sfix16_En15
  wire signed [15:0] delayLineDataOut0;  // sfix16_En15
  reg signed [15:0] delayLineDataIn1_1;  // sfix16_En15
  reg [2:0] wrAddr1;  // ufix3
  reg [2:0] rdAddrDelayLine1;  // ufix3
  wire signed [15:0] delayLineEnd1;  // sfix16_En15
  wire signed [15:0] delayLineDataOut1;  // sfix16_En15
  reg signed [15:0] delayLineDataIn2_1;  // sfix16_En15
  reg [2:0] wrAddr2;  // ufix3
  reg [2:0] rdAddrDelayLine2;  // ufix3
  wire signed [15:0] delayLineEnd2;  // sfix16_En15
  wire signed [15:0] delayLineDataOut2;  // sfix16_En15
  reg signed [15:0] delayLineDataIn3_1;  // sfix16_En15
  reg [2:0] wrAddr3;  // ufix3
  reg [2:0] rdAddReverse1;  // ufix3
  reg [2:0] rdAddReverse2;  // ufix3
  reg [2:0] rdAddReverse3;  // ufix3
  wire signed [15:0] delayLineEnd3;  // sfix16_En15
  wire signed [15:0] delayLineDataOut3;  // sfix16_En15
  reg signed [15:0] coeffTableOut2;  // sfix16_En15
  reg signed [15:0] coeffTableRegP2_1;  // sfix16_En15
  reg signed [15:0] coeffTableReg2_1;  // sfix16_En15
  wire signed [15:0] delayLineEnd4;  // sfix16_En15
  wire signed [15:0] delayLineDataOut4;  // sfix16_En15
  reg signed [15:0] coeffTableOut1;  // sfix16_En15
  reg signed [15:0] coeffTableRegP1_1;  // sfix16_En15
  reg signed [15:0] coeffTableReg1_1;  // sfix16_En15
  wire signed [15:0] delayLineEnd5deadOut;  // sfix16_En15
  wire signed [15:0] delayLineDataOut5;  // sfix16_En15
  reg signed [15:0] coeffTableOut0;  // sfix16_En15
  reg signed [15:0] coeffTableRegP0_1;  // sfix16_En15
  reg signed [15:0] coeffTableReg0_1;  // sfix16_En15
  wire signed [32:0] sumIn;  // sfix33_En30
  wire signed [32:0] sumOut;  // sfix33_En30
  wire signed [32:0] sumOut_0;  // sfix33_En30
  wire signed [32:0] sumOut_1;  // sfix33_En30
  reg signed [32:0] sumOutReg_1;  // sfix33_En30
  reg signed [32:0] accDataOut_1;  // sfix33_En30
  wire signed [32:0] accSwitchOut;  // sfix33_En30
  wire signed [32:0] accAdderOut;  // sfix33_En30
  wire signed [15:0] converterOut;  // sfix16_En15
  reg signed [15:0] dout_re_1;  // sfix16_En15
  wire signed [15:0] dataZero;  // sfix16_En15
  reg [2:0] InputControl_out4_0;  // ufix3

  initial begin
    coeffTableRegP2_1 = 16'sb0000000000000000;
    coeffTableRegP1_1 = 16'sb0000000000000000;
    coeffTableRegP0_1 = 16'sb0000000000000000;
  end

  assign coeff = 16'sb0000000000000000;

  assign haltProcess = 1'b0;

  FirRdyLogic_block u_firRdyLogic (.clk(clk),
                                   .rst_n(rst_n),
                                   .enb(enb),
                                   .dinSwitch(dataIn),  // sfix16_En15
                                   .dinVldSwitch(validIn),
                                   .coeff(coeff),  // sfix16_En15
                                   .haltProcess(haltProcess),
                                   .dinSM(dinSM),  // sfix16_En15
                                   .dinVldSM(dinVldSM)
                                   );

  always @(posedge clk)
    begin : rdCountReverse_process
      if (rst_n == 1'b0) begin
        rdCountReverse_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdCountReverse_1 <= nextDelayLineRdAddrReverse;
        end
      end
    end

  always @(posedge clk)
    begin : wrCount_process
      if (rst_n == 1'b0) begin
        wrCount_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          wrCount_1 <= nextDelayLineWrAddr;
        end
      end
    end

  always @(posedge clk)
    begin : rdCount_process
      if (rst_n == 1'b0) begin
        rdCount_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdCount_1 <= nextDelayLineRdAddr;
        end
      end
    end

  always @(posedge clk)
    begin : sharingCount_process
      if (rst_n == 1'b0) begin
        sharingCount_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          sharingCount_1 <= nextSharingCount;
        end
      end
    end

  // Input control counter combinatorial logic
  always @(dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1) begin
    delayLineValidInP = (sharingCount_1 == 3'b000) && (dinVldSM == 1'b1);
    lastPhaseStrobe = sharingCount_1 == 3'b111;
    if ((dinVldSM == 1'b1) || (sharingCount_1 > 3'b000)) begin
      if (sharingCount_1 == 3'b111) begin
        nextSharingCount = 3'b000;
      end
      else begin
        nextSharingCount = sharingCount_1 + 3'b001;
      end
    end
    else begin
      nextSharingCount = sharingCount_1;
    end
    if (dinVldSM == 1'b1) begin
      if (wrCount_1 == 3'b111) begin
        InputControl_out4_0 = 3'b000;
      end
      else begin
        InputControl_out4_0 = wrCount_1 + 3'b001;
      end
    end
    else begin
      InputControl_out4_0 = wrCount_1;
    end
    if ((rdCount_1 != InputControl_out4_0) || (dinVldSM == 1'b1)) begin
      if (rdCount_1 == 3'b000) begin
        nextDelayLineRdAddr = 3'b111;
      end
      else begin
        nextDelayLineRdAddr = rdCount_1 - 3'b001;
      end
    end
    else begin
      nextDelayLineRdAddr = rdCount_1;
    end
    if ((sharingCount_1 > 3'b000) || (dinVldSM == 1'b1)) begin
      if (sharingCount_1 == 3'b111) begin
        if (wrCount_1 == 3'b111) begin
          nextDelayLineRdAddrReverse = 3'b000;
        end
        else begin
          nextDelayLineRdAddrReverse = wrCount_1 + 3'b001;
        end
      end
      else if (rdCountReverse_1 == 3'b111) begin
        nextDelayLineRdAddrReverse = 3'b000;
      end
      else begin
        nextDelayLineRdAddrReverse = rdCountReverse_1 + 3'b001;
      end
    end
    else begin
      nextDelayLineRdAddrReverse = rdCountReverse_1;
    end
    nextDelayLineWrAddr = InputControl_out4_0;
  end

  always @(posedge clk)
    begin : delayLineShiftEn0_process
      if (rst_n == 1'b0) begin
        delayLineShiftEnP <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEnP <= lastPhaseStrobe;
        end
      end
    end

  always @(posedge clk)
    begin : delayLineShiftEn1_process
      if (rst_n == 1'b0) begin
        delayLineShiftEn1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEn1_1 <= delayLineShiftEnP;
        end
      end
    end

  always @(posedge clk)
    begin : delayLineShiftEn2_process
      if (rst_n == 1'b0) begin
        delayLineShiftEn2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn2_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn2_1 <= delayLineShiftEn1_1;
          end
        end
      end
    end

  always @(posedge clk)
    begin : delayLineShiftEn3_process
      if (rst_n == 1'b0) begin
        delayLineShiftEn3_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn3_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn3_1 <= delayLineShiftEn2_1;
          end
        end
      end
    end

  always @(posedge clk)
    begin : validOutLookahead_process
      if (rst_n == 1'b0) begin
        validOutLookahead_reg <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          validOutLookahead_reg[0] <= delayLineShiftEn3_1;
          validOutLookahead_reg[32'sd6:32'sd1] <= validOutLookahead_reg[32'sd5:32'sd0];
        end
      end
    end

  assign validOutLookahead_1 = validOutLookahead_reg[6];

  always @(posedge clk)
    begin : vldOut_process
      if (rst_n == 1'b0) begin
        vldOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          vldOut_1 <= validOutLookahead_1;
        end
      end
    end

  assign notValid =  ~ vldOut_1;

  always @(posedge clk)
    begin : rdAddr0_process
      if (rst_n == 1'b0) begin
        rdAddr0_1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddr0_1 <= sharingCount_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddr0_2_process
      if (rst_n == 1'b0) begin
        rdAddr1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddr1 <= rdAddr0_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddr1_1_process
      if (rst_n == 1'b0) begin
        rdAddr2 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddr2 <= rdAddr1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddr2_1_process
      if (rst_n == 1'b0) begin
        rdAddr3 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddr3 <= rdAddr2;
        end
      end
    end

  assign rdAddrEndNonZero = rdAddr3 != 3'b000;

  assign rdAddrEndZero =  ~ rdAddrEndNonZero;

  always @(posedge clk)
    begin : finalSumValidPipe_process
      if (rst_n == 1'b0) begin
        finalSumValidPipe_reg <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg[0] <= rdAddrEndZero;
          finalSumValidPipe_reg[32'sd5:32'sd1] <= finalSumValidPipe_reg[32'sd4:32'sd0];
        end
      end
    end

  assign accumulate = finalSumValidPipe_reg[5];

  assign accDataOut = 33'sh000000000;

  always @(posedge clk)
    begin : wrAddr_process
      if (rst_n == 1'b0) begin
        wrAddrP <= 3'b000;
      end
      else begin
        if (enb) begin
          wrAddrP <= wrCount_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrDelayLine_process
      if (rst_n == 1'b0) begin
        rdAddrDelayLine0 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine0 <= rdCount_1;
        end
      end
    end

  Addressable_Delay_Line_block1 u_delayLine0 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(dinSM),  // sfix16_En15
                                              .wrEn(delayLineValidInP),
                                              .wrAddr(wrAddrP),  // ufix3
                                              .rdAddr(rdAddrDelayLine0),  // ufix3
                                              .delayLineEnd(delayLineEnd0),  // sfix16_En15
                                              .dataOut(delayLineDataOut0)  // sfix16_En15
                                              );

  always @(posedge clk)
    begin : delayLineDataIn1_process
      if (rst_n == 1'b0) begin
        delayLineDataIn1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_1 <= delayLineEnd0;
        end
      end
    end

  always @(posedge clk)
    begin : wrAddr0_process
      if (rst_n == 1'b0) begin
        wrAddr1 <= 3'b000;
      end
      else begin
        if (enb) begin
          wrAddr1 <= wrAddrP;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrDelayLine0_1_process
      if (rst_n == 1'b0) begin
        rdAddrDelayLine1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine1 <= rdAddrDelayLine0;
        end
      end
    end

  Addressable_Delay_Line_block1 u_delayLine1 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn1_1),  // sfix16_En15
                                              .wrEn(delayLineShiftEn1_1),
                                              .wrAddr(wrAddr1),  // ufix3
                                              .rdAddr(rdAddrDelayLine1),  // ufix3
                                              .delayLineEnd(delayLineEnd1),  // sfix16_En15
                                              .dataOut(delayLineDataOut1)  // sfix16_En15
                                              );

  always @(posedge clk)
    begin : delayLineDataIn2_process
      if (rst_n == 1'b0) begin
        delayLineDataIn2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn2_1 <= delayLineEnd1;
        end
      end
    end

  always @(posedge clk)
    begin : wrAddr1_1_process
      if (rst_n == 1'b0) begin
        wrAddr2 <= 3'b000;
      end
      else begin
        if (enb) begin
          wrAddr2 <= wrAddr1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrDelayLine1_1_process
      if (rst_n == 1'b0) begin
        rdAddrDelayLine2 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine2 <= rdAddrDelayLine1;
        end
      end
    end

  Addressable_Delay_Line_block1 u_delayLine2 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn2_1),  // sfix16_En15
                                              .wrEn(delayLineShiftEn2_1),
                                              .wrAddr(wrAddr2),  // ufix3
                                              .rdAddr(rdAddrDelayLine2),  // ufix3
                                              .delayLineEnd(delayLineEnd2),  // sfix16_En15
                                              .dataOut(delayLineDataOut2)  // sfix16_En15
                                              );

  always @(posedge clk)
    begin : delayLineDataIn3_process
      if (rst_n == 1'b0) begin
        delayLineDataIn3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn3_1 <= delayLineEnd2;
        end
      end
    end

  always @(posedge clk)
    begin : wrAddr2_1_process
      if (rst_n == 1'b0) begin
        wrAddr3 <= 3'b000;
      end
      else begin
        if (enb) begin
          wrAddr3 <= wrAddr2;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrReverse0_process
      if (rst_n == 1'b0) begin
        rdAddReverse1 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddReverse1 <= rdCountReverse_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddReverse1_1_process
      if (rst_n == 1'b0) begin
        rdAddReverse2 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddReverse2 <= rdAddReverse1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddReverse2_1_process
      if (rst_n == 1'b0) begin
        rdAddReverse3 <= 3'b000;
      end
      else begin
        if (enb) begin
          rdAddReverse3 <= rdAddReverse2;
        end
      end
    end

  Addressable_Delay_Line_block2 u_delayLine3 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn3_1),  // sfix16_En15
                                              .validIn(delayLineShiftEn3_1),
                                              .wrAddr(wrAddr3),  // ufix3
                                              .rdAddr(rdAddReverse3),  // ufix3
                                              .delayLineEnd(delayLineEnd3),  // sfix16_En15
                                              .dataOut(delayLineDataOut3)  // sfix16_En15
                                              );

  // Coefficient table for multiplier2
  always @(rdAddr2) begin
    case ( rdAddr2)
      3'b000 :
        begin
          coeffTableOut2 = 16'sb1111100101101111;
        end
      3'b001 :
        begin
          coeffTableOut2 = 16'sb1111101011001001;
        end
      3'b010 :
        begin
          coeffTableOut2 = 16'sb0000100010110000;
        end
      3'b011 :
        begin
          coeffTableOut2 = 16'sb0000100100110000;
        end
      3'b100 :
        begin
          coeffTableOut2 = 16'sb1111001111011010;
        end
      3'b101 :
        begin
          coeffTableOut2 = 16'sb1110110011110101;
        end
      3'b110 :
        begin
          coeffTableOut2 = 16'sb0001001000101110;
        end
      3'b111 :
        begin
          coeffTableOut2 = 16'sb0100001000011101;
        end
      default :
        begin
          coeffTableOut2 = 16'sb0000000000000000;
        end
    endcase
  end

  always @(posedge clk)
    begin : coeffTableRegP2_process
      if (enb) begin
        coeffTableRegP2_1 <= coeffTableOut2;
      end
    end

  always @(posedge clk)
    begin : coeffTableReg2_process
      if (rst_n == 1'b0) begin
        coeffTableReg2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg2_1 <= coeffTableRegP2_1;
        end
      end
    end

  Addressable_Delay_Line_block2 u_delayLine4 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineEnd3),  // sfix16_En15
                                              .validIn(delayLineShiftEn2_1),
                                              .wrAddr(wrAddr2),  // ufix3
                                              .rdAddr(rdAddReverse2),  // ufix3
                                              .delayLineEnd(delayLineEnd4),  // sfix16_En15
                                              .dataOut(delayLineDataOut4)  // sfix16_En15
                                              );

  // Coefficient table for multiplier1
  always @(rdAddr1) begin
    case ( rdAddr1)
      3'b000 :
        begin
          coeffTableOut1 = 16'sb1111110110011110;
        end
      3'b001 :
        begin
          coeffTableOut1 = 16'sb1111111110001110;
        end
      3'b010 :
        begin
          coeffTableOut1 = 16'sb0000001100010110;
        end
      3'b011 :
        begin
          coeffTableOut1 = 16'sb0000000011111110;
        end
      3'b100 :
        begin
          coeffTableOut1 = 16'sb1111110000000110;
        end
      3'b101 :
        begin
          coeffTableOut1 = 16'sb1111111000101111;
        end
      3'b110 :
        begin
          coeffTableOut1 = 16'sb0000010100010110;
        end
      3'b111 :
        begin
          coeffTableOut1 = 16'sb0000001100011011;
        end
      default :
        begin
          coeffTableOut1 = 16'sb0000000000000000;
        end
    endcase
  end

  always @(posedge clk)
    begin : coeffTableRegP1_process
      if (enb) begin
        coeffTableRegP1_1 <= coeffTableOut1;
      end
    end

  always @(posedge clk)
    begin : coeffTableReg1_process
      if (rst_n == 1'b0) begin
        coeffTableReg1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg1_1 <= coeffTableRegP1_1;
        end
      end
    end

  Addressable_Delay_Line_block2 u_delayLine5 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineEnd4),  // sfix16_En15
                                              .validIn(delayLineShiftEn1_1),
                                              .wrAddr(wrAddr1),  // ufix3
                                              .rdAddr(rdAddReverse1),  // ufix3
                                              .delayLineEnd(delayLineEnd5deadOut),  // sfix16_En15
                                              .dataOut(delayLineDataOut5)  // sfix16_En15
                                              );

  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      3'b000 :
        begin
          coeffTableOut0 = 16'sb0000000010100001;
        end
      3'b001 :
        begin
          coeffTableOut0 = 16'sb0000000110110101;
        end
      3'b010 :
        begin
          coeffTableOut0 = 16'sb0000000110100000;
        end
      3'b011 :
        begin
          coeffTableOut0 = 16'sb1111111111000110;
        end
      3'b100 :
        begin
          coeffTableOut0 = 16'sb1111111010001001;
        end
      3'b101 :
        begin
          coeffTableOut0 = 16'sb0000000000011011;
        end
      3'b110 :
        begin
          coeffTableOut0 = 16'sb0000000111010001;
        end
      3'b111 :
        begin
          coeffTableOut0 = 16'sb0000000000011010;
        end
      default :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
    endcase
  end

  always @(posedge clk)
    begin : coeffTableRegP0_process
      if (enb) begin
        coeffTableRegP0_1 <= coeffTableOut0;
      end
    end

  always @(posedge clk)
    begin : coeffTableReg0_process
      if (rst_n == 1'b0) begin
        coeffTableReg0_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg0_1 <= coeffTableRegP0_1;
        end
      end
    end

  assign sumIn = 33'sh000000000;

  FilterTapSystolicPreAdd_block u_filterTap0 (.clk(clk),
                                              .enb(enb),
                                              .din_re(delayLineDataOut0),  // sfix16_En15
                                              .preAddIn(delayLineDataOut5),  // sfix16_En15
                                              .coeff(coeffTableReg0_1),  // sfix16_En15
                                              .sumIn(sumIn),  // sfix33_En30
                                              .sumOut(sumOut)  // sfix33_En30
                                              );

  FilterTapSystolicPreAdd_block u_filterTap1 (.clk(clk),
                                              .enb(enb),
                                              .din_re(delayLineDataOut1),  // sfix16_En15
                                              .preAddIn(delayLineDataOut4),  // sfix16_En15
                                              .coeff(coeffTableReg1_1),  // sfix16_En15
                                              .sumIn(sumOut),  // sfix33_En30
                                              .sumOut(sumOut_0)  // sfix33_En30
                                              );

  FilterTapSystolicPreAdd_block u_filterTap2 (.clk(clk),
                                              .enb(enb),
                                              .din_re(delayLineDataOut2),  // sfix16_En15
                                              .preAddIn(delayLineDataOut3),  // sfix16_En15
                                              .coeff(coeffTableReg2_1),  // sfix16_En15
                                              .sumIn(sumOut_0),  // sfix33_En30
                                              .sumOut(sumOut_1)  // sfix33_En30
                                              );

  always @(posedge clk)
    begin : sumOutReg_process
      if (rst_n == 1'b0) begin
        sumOutReg_1 <= 33'sh000000000;
      end
      else begin
        if (enb) begin
          sumOutReg_1 <= sumOut_1;
        end
      end
    end

  assign accSwitchOut = (accumulate == 1'b0 ? accDataOut_1 :
              accDataOut);

  assign accAdderOut = accSwitchOut + sumOutReg_1;

  always @(posedge clk)
    begin : accDataOut_2_process
      if (rst_n == 1'b0) begin
        accDataOut_1 <= 33'sh000000000;
      end
      else begin
        if (enb) begin
          accDataOut_1 <= accAdderOut;
        end
      end
    end

  assign converterOut = accDataOut_1[30:15];

  always @(posedge clk)
    begin : dout_re_process
      if (rst_n == 1'b0) begin
        dout_re_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && validOutLookahead_1) begin
          dout_re_1 <= converterOut;
        end
      end
    end

  assign dataZero = 16'sb0000000000000000;

  assign dataOut = (notValid == 1'b0 ? dout_re_1 :
              dataZero);

  assign validOut = vldOut_1;

endmodule  // CIC_Comp_Filter_2


// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\CIC_1.v
// Created: 2025-03-29 15:53:02
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CIC_1
// Source Path: DUC/DUC_module_with_ready/CIC_1
// Hierarchy Level: 1
// Model version: 3.89
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_1
          (clk,
           rst_n,
           enb,
           enb_1_625_1,
           enb_1_625_0,
           enb_1_1_1,
           CIC_1_in,
           CIC_1_out);


  input   clk;
  input   rst_n;
  input   enb;
  input   enb_1_625_1;
  input   enb_1_625_0;
  input   enb_1_1_1;
  input   signed [15:0] CIC_1_in;  // sfix16_En15
  output  signed [15:0] CIC_1_out;  // sfix16_E23


  wire signed [16:0] CS_Section_1_in_DTC;  // sfix17_En15
  reg signed [16:0] CS_Section_1_in_DTC_1;  // sfix17_En15
  wire signed [16:0] CS_Section_sub_1_sub_cast;  // sfix17_En15
  wire signed [16:0] CS_Section_1_out;  // sfix17_En15
  wire signed [17:0] CS_Section_2_in_DTC;  // sfix18_En15
  reg signed [17:0] CS_Section_2_in_DTC_1;  // sfix18_En15
  wire signed [17:0] CS_Section_sub_2_sub_cast;  // sfix18_En15
  wire signed [17:0] CS_Section_2_out;  // sfix18_En15
  wire signed [18:0] CS_Section_3_in_DTC;  // sfix19_En15
  reg signed [18:0] CS_Section_3_in_DTC_1;  // sfix19_En15
  wire signed [18:0] CS_Section_sub_3_sub_cast;  // sfix19_En15
  wire signed [18:0] CS_Section_3_out;  // sfix19_En15
  wire signed [19:0] CS_Section_4_in_DTC;  // sfix20_En15
  reg signed [19:0] CS_Section_4_in_DTC_1;  // sfix20_En15
  wire signed [19:0] CS_Section_sub_4_sub_cast;  // sfix20_En15
  wire signed [19:0] CS_Section_4_out;  // sfix20_En15
  reg signed [19:0] CS_Section_5_in_DTC;  // sfix20_En15
  wire signed [19:0] CS_Section_5_out;  // sfix20_En15
  wire signed [19:0] us_zero;  // sfix20_En15
  wire signed [19:0] us_muxout;  // sfix20_En15
  reg signed [19:0] us_bypass_reg;  // sfix20
  wire signed [19:0] us_bypassout;  // sfix20_En15
  reg signed [19:0] rateOut;  // sfix20_En15
  reg signed [19:0] IS_Section_1_out;  // sfix20_En15
  wire signed [19:0] IS_Section_1_out_1;  // sfix20_En15
  reg signed [28:0] IS_Section_2_out;  // sfix29_En15
  wire signed [28:0] IS_Section_add_2_add_cast;  // sfix29_En15
  wire signed [28:0] IS_Section_2_out_1;  // sfix29_En15
  reg signed [36:0] IS_Section_3_out;  // sfix37_En15
  wire signed [36:0] IS_Section_add_3_add_cast;  // sfix37_En15
  wire signed [36:0] IS_Section_3_out_1;  // sfix37_En15
  reg signed [44:0] IS_Section_4_out;  // sfix45_En15
  wire signed [44:0] IS_Section_add_4_add_cast;  // sfix45_En15
  wire signed [44:0] IS_Section_4_out_1;  // sfix45_En15
  reg signed [53:0] IS_Section_5_out;  // sfix54_En15
  wire signed [53:0] IS_Section_add_5_add_cast;  // sfix54_En15
  wire signed [53:0] IS_Section_5_out_1;  // sfix54_En15


  assign CS_Section_1_in_DTC = {CIC_1_in[15], CIC_1_in};
  always @(posedge clk)
    begin : rd_0_process
      if (rst_n == 1'b0) begin
        CS_Section_1_in_DTC_1 <= 17'sb00000000000000000;
      end
      else begin
        if (enb_1_625_0) begin
          CS_Section_1_in_DTC_1 <= CS_Section_1_in_DTC;
        end
      end
    end

  assign CS_Section_sub_1_sub_cast = {CIC_1_in[15], CIC_1_in};
  assign CS_Section_1_out = CS_Section_sub_1_sub_cast - CS_Section_1_in_DTC_1;
  assign CS_Section_2_in_DTC = {CS_Section_1_out[16], CS_Section_1_out};
  always @(posedge clk)
    begin : rd_1_process
      if (rst_n == 1'b0) begin
        CS_Section_2_in_DTC_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_625_0) begin
          CS_Section_2_in_DTC_1 <= CS_Section_2_in_DTC;
        end
      end
    end

  assign CS_Section_sub_2_sub_cast = {CS_Section_1_out[16], CS_Section_1_out};
  assign CS_Section_2_out = CS_Section_sub_2_sub_cast - CS_Section_2_in_DTC_1;
  assign CS_Section_3_in_DTC = {CS_Section_2_out[17], CS_Section_2_out};
  always @(posedge clk)
    begin : rd_2_process
      if (rst_n == 1'b0) begin
        CS_Section_3_in_DTC_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_625_0) begin
          CS_Section_3_in_DTC_1 <= CS_Section_3_in_DTC;
        end
      end
    end

  assign CS_Section_sub_3_sub_cast = {CS_Section_2_out[17], CS_Section_2_out};
  assign CS_Section_3_out = CS_Section_sub_3_sub_cast - CS_Section_3_in_DTC_1;
  assign CS_Section_4_in_DTC = {CS_Section_3_out[18], CS_Section_3_out};
  always @(posedge clk)
    begin : rd_3_process
      if (rst_n == 1'b0) begin
        CS_Section_4_in_DTC_1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_625_0) begin
          CS_Section_4_in_DTC_1 <= CS_Section_4_in_DTC;
        end
      end
    end

  assign CS_Section_sub_4_sub_cast = {CS_Section_3_out[18], CS_Section_3_out};
  assign CS_Section_4_out = CS_Section_sub_4_sub_cast - CS_Section_4_in_DTC_1;
  always @(posedge clk)
    begin : rd_4_process
      if (rst_n == 1'b0) begin
        CS_Section_5_in_DTC <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_625_0) begin
          CS_Section_5_in_DTC <= CS_Section_4_out;
        end
      end
    end

  assign CS_Section_5_out = CS_Section_4_out - CS_Section_5_in_DTC;
  assign us_zero = 20'sb00000000000000000000;

  // us: Upsample by 625, Sample offset 0 
  assign us_muxout = (enb_1_625_1 == 1'b1 ? CS_Section_5_out :
              us_zero);
  // Upsample bypass register
  always @(posedge clk)
    begin : us_bypass_process
      if (rst_n == 1'b0) begin
        us_bypass_reg <= 20'sb00000000000000000000;
      end
      else begin
        if (enb_1_1_1) begin
          us_bypass_reg <= us_muxout;
        end
      end
    end

  assign us_bypassout = (enb_1_1_1 == 1'b1 ? us_muxout :
              us_bypass_reg);

  always @(posedge clk)
    begin : rd_5_process
      if (rst_n == 1'b0) begin
        rateOut <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          rateOut <= us_bypassout;
        end
      end
    end

  assign IS_Section_1_out_1 = rateOut + IS_Section_1_out;
  always @(posedge clk)
    begin : rd_6_process
      if (rst_n == 1'b0) begin
        IS_Section_1_out <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          IS_Section_1_out <= IS_Section_1_out_1;
        end
      end
    end

  assign IS_Section_add_2_add_cast = {{9{IS_Section_1_out[19]}}, IS_Section_1_out};
  assign IS_Section_2_out_1 = IS_Section_add_2_add_cast + IS_Section_2_out;
  always @(posedge clk)
    begin : rd_7_process
      if (rst_n == 1'b0) begin
        IS_Section_2_out <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          IS_Section_2_out <= IS_Section_2_out_1;
        end
      end
    end

  assign IS_Section_add_3_add_cast = {{8{IS_Section_2_out[28]}}, IS_Section_2_out};
  assign IS_Section_3_out_1 = IS_Section_add_3_add_cast + IS_Section_3_out;
  always @(posedge clk)
    begin : rd_8_process
      if (rst_n == 1'b0) begin
        IS_Section_3_out <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          IS_Section_3_out <= IS_Section_3_out_1;
        end
      end
    end

  assign IS_Section_add_4_add_cast = {{8{IS_Section_3_out[36]}}, IS_Section_3_out};
  assign IS_Section_4_out_1 = IS_Section_add_4_add_cast + IS_Section_4_out;
  always @(posedge clk)
    begin : rd_9_process
      if (rst_n == 1'b0) begin
        IS_Section_4_out <= 45'sh000000000000;
      end
      else begin
        if (enb) begin
          IS_Section_4_out <= IS_Section_4_out_1;
        end
      end
    end

  assign IS_Section_add_5_add_cast = {{9{IS_Section_4_out[44]}}, IS_Section_4_out};
  assign IS_Section_5_out_1 = IS_Section_add_5_add_cast + IS_Section_5_out;
  always @(posedge clk)
    begin : rd_10_process
      if (rst_n == 1'b0) begin
        IS_Section_5_out <= 54'sh00000000000000;
      end
      else begin
        if (enb) begin
          IS_Section_5_out <= IS_Section_5_out_1;
        end
      end
    end

  assign CIC_1_out = IS_Section_5_out[53:38];
endmodule  // CIC_1


// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\Signal_Source.v
// Created: 2025-01-11 21:47:10
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8.33333e-09
// Target subsystem base rate: 8.33333e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// SIGNAL                        ce_out        8.33333e-09
// VLD                           ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Signal_Source
// Source Path: DUC/Signal_Source
// Hierarchy Level: 0
// Model version: 3.29
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Signal_Source
          (clk,
           rst_n,
           clk_enable,
           SELECT,
           ce_out,
           SIGNAL,
           VLD);


  input   clk;
  input   rst_n;
  input   clk_enable;
  input   [7:0] SELECT;  // uint8
  output  ce_out;
  output  signed [15:0] SIGNAL;  // sfix16_En15
  output  VLD;


  wire enb;
  reg [7:0] SELECT_1;  // uint8
  reg [7:0] SELECT_2;  // uint8
  wire signed [15:0] Painter_out1;  // sfix16_En15
  wire Painter_out2;
  wire signed [15:0] single_tone_500_1k_out1;  // sfix16_En15
  wire single_tone_500_1k_out2;
  wire signed [15:0] Multiport_Switch_out1;  // sfix16_En15
  reg signed [15:0] Multiport_Switch_out1_1;  // sfix16_En15
  reg  Painter_out2_1;
  wire signed [15:0] Painter_out2_dtc;  // sfix16_En15
  reg  single_tone_500_1k_out2_1;
  wire signed [15:0] single_tone_500_1k_out2_dtc;  // sfix16_En15
  wire signed [15:0] Multiport_Switch1_out1;  // sfix16_En15
  wire Data_Type_Conversion_out1;
  reg  [1:0] rd_5_reg;  // ufix1 [2]
  wire Data_Type_Conversion_out1_1;


  assign enb = clk_enable;

  always @(posedge clk)
    begin : rd_0_process
      if (rst_n == 1'b0) begin
        SELECT_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          SELECT_1 <= SELECT;
        end
      end
    end

  always @(posedge clk)
    begin : rd_1_process
      if (rst_n == 1'b0) begin
        SELECT_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          SELECT_2 <= SELECT_1;
        end
      end
    end

  Painter u_Painter (.clk(clk),
                     .rst_n(rst_n),
                     .enb(clk_enable),
                     .SIGNAL(Painter_out1),  // sfix16_En15
                     .VLD(Painter_out2)
                     );
  single_tone_500_1k u_single_tone_500_1k (.clk(clk),
                                           .rst_n(rst_n),
                                           .enb(clk_enable),
                                           .SIGNAL(single_tone_500_1k_out1),  // sfix16_En15
                                           .VLD(single_tone_500_1k_out2)
                                           );
  assign Multiport_Switch_out1 = (SELECT_2 == 8'b00000000 ? Painter_out1 :
              single_tone_500_1k_out1);
  always @(posedge clk)
    begin : rd_2_process
      if (rst_n == 1'b0) begin
        Multiport_Switch_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Multiport_Switch_out1_1 <= Multiport_Switch_out1;
        end
      end
    end

  assign SIGNAL = Multiport_Switch_out1_1;

  always @(posedge clk)
    begin : rd_3_process
      if (rst_n == 1'b0) begin
        Painter_out2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Painter_out2_1 <= Painter_out2;
        end
      end
    end

  assign Painter_out2_dtc = {Painter_out2_1, 15'b000000000000000};

  always @(posedge clk)
    begin : rd_4_process
      if (rst_n == 1'b0) begin
        single_tone_500_1k_out2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          single_tone_500_1k_out2_1 <= single_tone_500_1k_out2;
        end
      end
    end

  assign single_tone_500_1k_out2_dtc = {single_tone_500_1k_out2_1, 15'b000000000000000};

  assign Multiport_Switch1_out1 = (SELECT_1 == 8'b00000000 ? Painter_out2_dtc :
              single_tone_500_1k_out2_dtc);
  assign Data_Type_Conversion_out1 = (Multiport_Switch1_out1 != 16'sb0000000000000000 ? 1'b1 :
              1'b0);
  always @(posedge clk)
    begin : rd_5_process
      if (rst_n == 1'b0) begin
        rd_5_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg[0] <= Data_Type_Conversion_out1;
          rd_5_reg[1] <= rd_5_reg[0];
        end
      end
    end

  assign Data_Type_Conversion_out1_1 = rd_5_reg[1];

  assign VLD = Data_Type_Conversion_out1_1;

  assign ce_out = clk_enable;

endmodule  // Signal_Source


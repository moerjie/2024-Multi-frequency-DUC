// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\my_NCO.v
// Created: 2025-03-08 20:18:52
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8.33333e-09
// Target subsystem base rate: 8.33333e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// SIGNAL                        ce_out        8.33333e-09
// VLD                           ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: my_NCO
// Source Path: DUC/my_NCO
// Hierarchy Level: 0
// Model version: 3.49
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module my_NCO
          (clk,
           rst_n,
           clk_enable,
           phInc,
           ce_out,
           SIGNAL,
           VLD);


  input   clk;
  input   rst_n;
  input   clk_enable;
  input   [15:0] phInc;  // uint16
  output  ce_out;
  output  signed [15:0] SIGNAL;  // sfix16_En15
  output  VLD;


  wire enb;
  wire [15:0] count_step;  // uint16
  wire [15:0] count_from_1;  // uint16
  reg [15:0] Counter_Limited_out1;  // uint16
  wire [15:0] count;  // uint16
  wire needToWrap;
  wire [15:0] count_value;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire Relational_Operator_out1;
  wire signed [15:0] NCO_out1;  // sfix16_En15
  wire NCO_out2;
  wire signed [31:0] Gain2_mul_temp;  // sfix32_En30
  wire signed [15:0] Gain2_out1;  // sfix16_En15


  assign count_step = 16'b0000000000000001;
  assign count_from_1 = 16'b0000000000000000;
  assign enb = clk_enable;

  assign count = Counter_Limited_out1 + count_step;
  assign needToWrap = Counter_Limited_out1 >= 16'b0000100111000011;
  assign count_value = (needToWrap == 1'b0 ? count :
              count_from_1);
  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2499
  always @(posedge clk)
    begin : Counter_Limited_process
      if (rst_n == 1'b0) begin
        Counter_Limited_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Counter_Limited_out1 <= count_value;
        end
      end
    end
  assign Constant_out1 = 16'b0000000000000000;
  assign Relational_Operator_out1 = Counter_Limited_out1 == Constant_out1;
  NCO u_NCO (.clk(clk),
             .rst_n(rst_n),
             .enb(clk_enable),
             .inc(phInc),  // uint16
             .validIn(Relational_Operator_out1),
             .sine(NCO_out1),  // sfix16_En15
             .validOut(NCO_out2)
             );
  assign Gain2_mul_temp = 16'sb0111100110011010 * NCO_out1;
  assign Gain2_out1 = Gain2_mul_temp[30:15];
  assign SIGNAL = Gain2_out1;

  assign VLD = NCO_out2;

  assign ce_out = clk_enable;

endmodule  // my_NCO


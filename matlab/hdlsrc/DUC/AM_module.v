// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\AM_module.v
// Created: 2025-03-29 20:57:15
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8.33333e-09
// Target subsystem base rate: 8.33333e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// AM_OUT                        ce_out        8.33333e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: AM_module
// Source Path: DUC/DUC/AM_module
// Hierarchy Level: 0
// Model version: 3.90
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module AM_module
          (clk,
           rst_n,
           clk_enable,
           DUC_SIGNAL_IN,
           ce_out,
           AM_OUT);


  input   clk;
  input   rst_n;
  input   clk_enable;
  input   signed [15:0] DUC_SIGNAL_IN;  // sfix16_En14
  output  ce_out;
  output  signed [13:0] AM_OUT;  // sfix14_En10


  wire enb;
  reg signed [15:0] Delay2_out1;  // sfix16_En14
  reg signed [15:0] Delay2_out1_1;  // sfix16_En14
  wire signed [15:0] ma_out1;  // sfix16_En15
  reg signed [15:0] ma_out1_1;  // sfix16_En15
  wire signed [31:0] Product_out1;  // sfix32_En29
  reg signed [31:0] Product_out1_1;  // sfix32_En29
  wire signed [15:0] Constant8_out1;  // sfix16_En15
  wire signed [31:0] Add1_add_cast;  // sfix32_En29
  wire signed [31:0] Add1_out1;  // sfix32_En29
  wire signed [15:0] Delay1_out1;  // sfix16_En14
  reg signed [15:0] Delay1_out1_1;  // sfix16_En14
  wire Valid_out1;
  wire signed [15:0] Carry1_out1;  // sfix16_En15
  reg signed [15:0] HwModeRegister3_reg [0:1];  // sfix16 [2]
  wire signed [15:0] HwModeRegister3_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Carry1_out1_1;  // sfix16_En15
  wire signed [31:0] Product1_out1;  // sfix32_En29
  wire signed [15:0] Carry2_out1;  // sfix16_En15
  reg signed [15:0] HwModeRegister5_reg [0:1];  // sfix16 [2]
  wire signed [15:0] HwModeRegister5_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Carry2_out1_1;  // sfix16_En15
  wire signed [31:0] Product2_out1;  // sfix32_En29
  wire signed [15:0] Carry3_out1;  // sfix16_En15
  reg signed [15:0] HwModeRegister7_reg [0:1];  // sfix16 [2]
  wire signed [15:0] HwModeRegister7_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Carry3_out1_1;  // sfix16_En15
  wire signed [31:0] Product3_out1;  // sfix32_En29
  reg signed [31:0] Product1_out1_1;  // sfix32_En29
  wire signed [13:0] Delay_out1;  // sfix14_En11
  reg signed [31:0] Product2_out1_1;  // sfix32_En29
  wire signed [13:0] Delay6_out1;  // sfix14_En11
  wire signed [31:0] Combine_stage2_add_cast;  // sfix32_En11
  wire signed [31:0] Combine_stage2_add_cast_1;  // sfix32_En11
  wire signed [31:0] Combine_stage2_add_temp;  // sfix32_En11
  wire signed [14:0] Combine_op_stage1;  // sfix15_En11
  reg signed [31:0] Product3_out1_1;  // sfix32_En29
  wire signed [13:0] Delay7_out1;  // sfix14_En11
  wire signed [31:0] Combine_stage3_add_cast;  // sfix32_En11
  wire signed [31:0] Combine_stage3_add_cast_1;  // sfix32_En11
  wire signed [31:0] Combine_stage3_add_temp;  // sfix32_En11
  wire signed [15:0] Combine_out1;  // sfix16_En11
  wire signed [13:0] INV_SINC_out1;  // sfix14_En10
  reg signed [31:0] HwModeRegister3_t_0_0;  // int32
  reg signed [31:0] HwModeRegister3_t_1;  // int32
  reg signed [31:0] HwModeRegister5_t_0_0;  // int32
  reg signed [31:0] HwModeRegister5_t_1;  // int32
  reg signed [31:0] HwModeRegister7_t_0_0;  // int32
  reg signed [31:0] HwModeRegister7_t_1;  // int32

  // 多载波调制
  // 合路输出及反SINC滤波器补偿
  // 直流偏置


  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay2_process
      if (rst_n == 1'b0) begin
        Delay2_out1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= DUC_SIGNAL_IN;
        end
      end
    end
  always @(posedge clk)
    begin : HwModeRegister_process
      if (rst_n == 1'b0) begin
        Delay2_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_1 <= Delay2_out1;
        end
      end
    end

  assign ma_out1 = 16'sb0111100110011010;
  always @(posedge clk)
    begin : HwModeRegister1_process
      if (rst_n == 1'b0) begin
        ma_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          ma_out1_1 <= ma_out1;
        end
      end
    end

  assign Product_out1 = Delay2_out1_1 * ma_out1_1;
  always @(posedge clk)
    begin : PipelineRegister_process
      if (rst_n == 1'b0) begin
        Product_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product_out1_1 <= Product_out1;
        end
      end
    end

  assign Constant8_out1 = 16'sb0111111111111111;
  assign Add1_add_cast = {{2{Constant8_out1[15]}}, {Constant8_out1, 14'b00000000000000}};
  assign Add1_out1 = Product_out1_1 + Add1_add_cast;
  assign Delay1_out1 = ((Add1_out1[31] == 1'b0) && (Add1_out1[30] != 1'b0) ? 16'sb0111111111111111 :
              ((Add1_out1[31] == 1'b1) && (Add1_out1[30] != 1'b1) ? 16'sb1000000000000000 :
              $signed(Add1_out1[30:15])));
  always @(posedge clk)
    begin : reduced_process
      if (rst_n == 1'b0) begin
        Delay1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_1 <= Delay1_out1;
        end
      end
    end

  assign Valid_out1 = 1'b1;
  Carry1 u_Carry1 (.clk(clk),
                   .rst_n(rst_n),
                   .enb(clk_enable),
                   .VLD(Valid_out1),
                   .OUT(Carry1_out1)  // sfix16_En15
                   );
  always @(posedge clk)
    begin : HwModeRegister3_process
      if (rst_n == 1'b0) begin
        for(HwModeRegister3_t_1 = 32'sd0; HwModeRegister3_t_1 <= 32'sd1; HwModeRegister3_t_1 = HwModeRegister3_t_1 + 32'sd1) begin
          HwModeRegister3_reg[HwModeRegister3_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister3_t_0_0 = 32'sd0; HwModeRegister3_t_0_0 <= 32'sd1; HwModeRegister3_t_0_0 = HwModeRegister3_t_0_0 + 32'sd1) begin
            HwModeRegister3_reg[HwModeRegister3_t_0_0] <= HwModeRegister3_reg_next[HwModeRegister3_t_0_0];
          end
        end
      end
    end

  assign Carry1_out1_1 = HwModeRegister3_reg[1];
  assign HwModeRegister3_reg_next[0] = Carry1_out1;
  assign HwModeRegister3_reg_next[1] = HwModeRegister3_reg[0];

  assign Product1_out1 = Delay1_out1_1 * Carry1_out1_1;
  Carry2 u_Carry2 (.clk(clk),
                   .rst_n(rst_n),
                   .enb(clk_enable),
                   .VLD(Valid_out1),
                   .OUT(Carry2_out1)  // sfix16_En15
                   );
  always @(posedge clk)
    begin : HwModeRegister5_process
      if (rst_n == 1'b0) begin
        for(HwModeRegister5_t_1 = 32'sd0; HwModeRegister5_t_1 <= 32'sd1; HwModeRegister5_t_1 = HwModeRegister5_t_1 + 32'sd1) begin
          HwModeRegister5_reg[HwModeRegister5_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister5_t_0_0 = 32'sd0; HwModeRegister5_t_0_0 <= 32'sd1; HwModeRegister5_t_0_0 = HwModeRegister5_t_0_0 + 32'sd1) begin
            HwModeRegister5_reg[HwModeRegister5_t_0_0] <= HwModeRegister5_reg_next[HwModeRegister5_t_0_0];
          end
        end
      end
    end

  assign Carry2_out1_1 = HwModeRegister5_reg[1];
  assign HwModeRegister5_reg_next[0] = Carry2_out1;
  assign HwModeRegister5_reg_next[1] = HwModeRegister5_reg[0];

  assign Product2_out1 = Delay1_out1_1 * Carry2_out1_1;
  Carry3 u_Carry3 (.clk(clk),
                   .rst_n(rst_n),
                   .enb(clk_enable),
                   .VLD(Valid_out1),
                   .OUT(Carry3_out1)  // sfix16_En15
                   );
  always @(posedge clk)
    begin : HwModeRegister7_process
      if (rst_n == 1'b0) begin
        for(HwModeRegister7_t_1 = 32'sd0; HwModeRegister7_t_1 <= 32'sd1; HwModeRegister7_t_1 = HwModeRegister7_t_1 + 32'sd1) begin
          HwModeRegister7_reg[HwModeRegister7_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister7_t_0_0 = 32'sd0; HwModeRegister7_t_0_0 <= 32'sd1; HwModeRegister7_t_0_0 = HwModeRegister7_t_0_0 + 32'sd1) begin
            HwModeRegister7_reg[HwModeRegister7_t_0_0] <= HwModeRegister7_reg_next[HwModeRegister7_t_0_0];
          end
        end
      end
    end

  assign Carry3_out1_1 = HwModeRegister7_reg[1];
  assign HwModeRegister7_reg_next[0] = Carry3_out1;
  assign HwModeRegister7_reg_next[1] = HwModeRegister7_reg[0];

  assign Product3_out1 = Delay1_out1_1 * Carry3_out1_1;
  always @(posedge clk)
    begin : PipelineRegister1_process
      if (rst_n == 1'b0) begin
        Product1_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product1_out1_1 <= Product1_out1;
        end
      end
    end

  assign Delay_out1 = Product1_out1_1[31:18];
  always @(posedge clk)
    begin : PipelineRegister2_process
      if (rst_n == 1'b0) begin
        Product2_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product2_out1_1 <= Product2_out1;
        end
      end
    end

  assign Delay6_out1 = Product2_out1_1[31:18];
  assign Combine_stage2_add_cast = {{18{Delay_out1[13]}}, Delay_out1};
  assign Combine_stage2_add_cast_1 = {{18{Delay6_out1[13]}}, Delay6_out1};
  assign Combine_stage2_add_temp = Combine_stage2_add_cast + Combine_stage2_add_cast_1;
  assign Combine_op_stage1 = Combine_stage2_add_temp[14:0];

  always @(posedge clk)
    begin : PipelineRegister3_process
      if (rst_n == 1'b0) begin
        Product3_out1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product3_out1_1 <= Product3_out1;
        end
      end
    end

  assign Delay7_out1 = Product3_out1_1[31:18];
  assign Combine_stage3_add_cast = {{17{Combine_op_stage1[14]}}, Combine_op_stage1};
  assign Combine_stage3_add_cast_1 = {{18{Delay7_out1[13]}}, Delay7_out1};
  assign Combine_stage3_add_temp = Combine_stage3_add_cast + Combine_stage3_add_cast_1;
  assign Combine_out1 = Combine_stage3_add_temp[15:0];
  INV_SINC u_INV_SINC (.clk(clk),
                       .rst_n(rst_n),
                       .enb(clk_enable),
                       .In1(Combine_out1),  // sfix16_En11
                       .In2(Valid_out1),
                       .Out1(INV_SINC_out1)  // sfix14_En10
                       );
  assign AM_OUT = INV_SINC_out1;

  assign ce_out = clk_enable;

endmodule  // AM_module


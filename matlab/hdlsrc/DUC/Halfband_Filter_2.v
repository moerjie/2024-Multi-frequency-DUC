// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\Halfband_Filter_2.v
// Created: 2025-03-29 15:53:02
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Halfband_Filter_2
// Source Path: DUC/DUC_module_with_ready/Halfband Filter 2
// Hierarchy Level: 1
// Model version: 3.89
// 
// Discrete FIR Filter
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Halfband_Filter_2
          (clk,
           rst_n,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   rst_n;
  input   enb;
  input   signed [15:0] dataIn;  // sfix16_En15
  input   validIn;
  output  signed [15:0] dataOut;  // sfix16_En15
  output  validOut;


  wire signed [15:0] coeff;  // sfix16_En15
  wire haltProcess;
  wire signed [15:0] dinSM;  // sfix16_En15
  wire dinVldSM;
  reg [3:0] nextDelayLineRdAddrReverse;  // ufix4
  reg [3:0] rdCountReverse_1;  // ufix4
  reg [3:0] nextDelayLineWrAddr;  // ufix4
  reg [3:0] wrCount_1;  // ufix4
  reg [3:0] nextDelayLineRdAddr;  // ufix4
  reg [3:0] rdCount_1;  // ufix4
  reg [3:0] nextSharingCount;  // ufix4
  reg [3:0] sharingCount_1;  // ufix4
  reg  delayLineValidInP;
  reg  lastPhaseStrobe;
  reg  delayLineShiftEnP;
  reg  delayLineShiftEn1_1;
  reg  [4:0] validOutLookahead_reg;  // ufix1 [5]
  wire validOutLookahead_1;
  reg  vldOut_1;
  wire notValid;
  reg [3:0] wrAddrP;  // ufix4
  reg [3:0] rdAddrDelayLine0;  // ufix4
  wire signed [15:0] delayLineEnd0;  // sfix16_En15
  wire signed [15:0] delayLineDataOut0;  // sfix16_En15
  reg signed [15:0] delayLineDataIn1_1;  // sfix16_En15
  reg [3:0] wrAddr1;  // ufix4
  reg [3:0] rdAddReverse1;  // ufix4
  wire signed [15:0] delayLineDataOut1;  // sfix16_En15
  reg [3:0] rdAddr0_1;  // ufix4
  reg signed [15:0] coeffTableOut0;  // sfix16_En15
  reg signed [15:0] coeffTableRegP0_1;  // sfix16_En15
  reg signed [15:0] coeffTableReg0_1;  // sfix16_En15
  reg [3:0] rdAddr1;  // ufix4
  wire rdAddrEndNonZero;
  wire rdAddrEndZero;
  reg  [3:0] finalSumValidPipe_reg;  // ufix1 [4]
  wire accumulate;
  wire signed [31:0] accDataOut;  // sfix32_En30
  wire signed [31:0] sumOut;  // sfix32_En30
  wire signed [31:0] accSwitchOut;  // sfix32_En30
  wire signed [15:0] converterOut;  // sfix16_En15
  reg signed [15:0] dout_re_1;  // sfix16_En15
  wire signed [15:0] dataZero;  // sfix16_En15
  reg [3:0] InputControl_out4_0;  // ufix4

  initial begin
    coeffTableRegP0_1 = 16'sb0000000000000000;
  end

  assign coeff = 16'sb0000000000000000;

  assign haltProcess = 1'b0;

  FirRdyLogic_block1 u_firRdyLogic (.clk(clk),
                                    .rst_n(rst_n),
                                    .enb(enb),
                                    .dinSwitch(dataIn),  // sfix16_En15
                                    .dinVldSwitch(validIn),
                                    .coeff(coeff),  // sfix16_En15
                                    .haltProcess(haltProcess),
                                    .dinSM(dinSM),  // sfix16_En15
                                    .dinVldSM(dinVldSM)
                                    );

  always @(posedge clk)
    begin : rdCountReverse_process
      if (rst_n == 1'b0) begin
        rdCountReverse_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdCountReverse_1 <= nextDelayLineRdAddrReverse;
        end
      end
    end

  always @(posedge clk)
    begin : wrCount_process
      if (rst_n == 1'b0) begin
        wrCount_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          wrCount_1 <= nextDelayLineWrAddr;
        end
      end
    end

  always @(posedge clk)
    begin : rdCount_process
      if (rst_n == 1'b0) begin
        rdCount_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdCount_1 <= nextDelayLineRdAddr;
        end
      end
    end

  always @(posedge clk)
    begin : sharingCount_process
      if (rst_n == 1'b0) begin
        sharingCount_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          sharingCount_1 <= nextSharingCount;
        end
      end
    end

  // Input control counter combinatorial logic
  always @(dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1) begin
    delayLineValidInP = (sharingCount_1 == 4'b0000) && (dinVldSM == 1'b1);
    lastPhaseStrobe = sharingCount_1 == 4'b1101;
    if ((dinVldSM == 1'b1) || (sharingCount_1 > 4'b0000)) begin
      if (sharingCount_1 == 4'b1101) begin
        nextSharingCount = 4'b0000;
      end
      else begin
        nextSharingCount = sharingCount_1 + 4'b0001;
      end
    end
    else begin
      nextSharingCount = sharingCount_1;
    end
    if (dinVldSM == 1'b1) begin
      if (wrCount_1 == 4'b1101) begin
        InputControl_out4_0 = 4'b0000;
      end
      else begin
        InputControl_out4_0 = wrCount_1 + 4'b0001;
      end
    end
    else begin
      InputControl_out4_0 = wrCount_1;
    end
    if ((rdCount_1 != InputControl_out4_0) || (dinVldSM == 1'b1)) begin
      if (rdCount_1 == 4'b0000) begin
        nextDelayLineRdAddr = 4'b1101;
      end
      else begin
        nextDelayLineRdAddr = rdCount_1 - 4'b0001;
      end
    end
    else begin
      nextDelayLineRdAddr = rdCount_1;
    end
    if ((sharingCount_1 > 4'b0000) || (dinVldSM == 1'b1)) begin
      if (sharingCount_1 == 4'b1101) begin
        if (wrCount_1 == 4'b1101) begin
          nextDelayLineRdAddrReverse = 4'b0000;
        end
        else begin
          nextDelayLineRdAddrReverse = wrCount_1 + 4'b0001;
        end
      end
      else if (rdCountReverse_1 == 4'b1101) begin
        nextDelayLineRdAddrReverse = 4'b0000;
      end
      else begin
        nextDelayLineRdAddrReverse = rdCountReverse_1 + 4'b0001;
      end
    end
    else begin
      nextDelayLineRdAddrReverse = rdCountReverse_1;
    end
    nextDelayLineWrAddr = InputControl_out4_0;
  end

  always @(posedge clk)
    begin : delayLineShiftEn0_process
      if (rst_n == 1'b0) begin
        delayLineShiftEnP <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEnP <= lastPhaseStrobe;
        end
      end
    end

  always @(posedge clk)
    begin : delayLineShiftEn1_process
      if (rst_n == 1'b0) begin
        delayLineShiftEn1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEn1_1 <= delayLineShiftEnP;
        end
      end
    end

  always @(posedge clk)
    begin : validOutLookahead_process
      if (rst_n == 1'b0) begin
        validOutLookahead_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          validOutLookahead_reg[0] <= delayLineShiftEn1_1;
          validOutLookahead_reg[32'sd4:32'sd1] <= validOutLookahead_reg[32'sd3:32'sd0];
        end
      end
    end

  assign validOutLookahead_1 = validOutLookahead_reg[4];

  always @(posedge clk)
    begin : vldOut_process
      if (rst_n == 1'b0) begin
        vldOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          vldOut_1 <= validOutLookahead_1;
        end
      end
    end

  assign notValid =  ~ vldOut_1;

  always @(posedge clk)
    begin : wrAddr_process
      if (rst_n == 1'b0) begin
        wrAddrP <= 4'b0000;
      end
      else begin
        if (enb) begin
          wrAddrP <= wrCount_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrDelayLine_process
      if (rst_n == 1'b0) begin
        rdAddrDelayLine0 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdAddrDelayLine0 <= rdCount_1;
        end
      end
    end

  Addressable_Delay_Line_block3 u_delayLine0 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(dinSM),  // sfix16_En15
                                              .wrEn(delayLineValidInP),
                                              .wrAddr(wrAddrP),  // ufix4
                                              .rdAddr(rdAddrDelayLine0),  // ufix4
                                              .delayLineEnd(delayLineEnd0),  // sfix16_En15
                                              .dataOut(delayLineDataOut0)  // sfix16_En15
                                              );

  always @(posedge clk)
    begin : delayLineDataIn1_process
      if (rst_n == 1'b0) begin
        delayLineDataIn1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_1 <= delayLineEnd0;
        end
      end
    end

  always @(posedge clk)
    begin : wrAddr0_process
      if (rst_n == 1'b0) begin
        wrAddr1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          wrAddr1 <= wrAddrP;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddrReverse0_process
      if (rst_n == 1'b0) begin
        rdAddReverse1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdAddReverse1 <= rdCountReverse_1;
        end
      end
    end

  Addressable_Delay_Line_block4 u_delayLine1 (.clk(clk),
                                              .rst_n(rst_n),
                                              .enb(enb),
                                              .dataIn(delayLineDataIn1_1),  // sfix16_En15
                                              .validIn(delayLineShiftEn1_1),
                                              .wrAddr(wrAddr1),  // ufix4
                                              .rdAddr(rdAddReverse1),  // ufix4
                                              .dataOut(delayLineDataOut1)  // sfix16_En15
                                              );

  always @(posedge clk)
    begin : rdAddr0_process
      if (rst_n == 1'b0) begin
        rdAddr0_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdAddr0_1 <= sharingCount_1;
        end
      end
    end

  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      4'b0000 :
        begin
          coeffTableOut0 = 16'sb0000000000001001;
        end
      4'b0001 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b0010 :
        begin
          coeffTableOut0 = 16'sb1111111111001001;
        end
      4'b0011 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b0100 :
        begin
          coeffTableOut0 = 16'sb0000000011000011;
        end
      4'b0101 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b0110 :
        begin
          coeffTableOut0 = 16'sb1111110111101100;
        end
      4'b0111 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b1000 :
        begin
          coeffTableOut0 = 16'sb0000010011100100;
        end
      4'b1001 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b1010 :
        begin
          coeffTableOut0 = 16'sb1111010010101001;
        end
      4'b1011 :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
      4'b1100 :
        begin
          coeffTableOut0 = 16'sb0010011111110001;
        end
      4'b1101 :
        begin
          coeffTableOut0 = 16'sb0100000000000000;
        end
      default :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
    endcase
  end

  always @(posedge clk)
    begin : coeffTableRegP0_process
      if (enb) begin
        coeffTableRegP0_1 <= coeffTableOut0;
      end
    end

  always @(posedge clk)
    begin : coeffTableReg0_process
      if (rst_n == 1'b0) begin
        coeffTableReg0_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg0_1 <= coeffTableRegP0_1;
        end
      end
    end

  always @(posedge clk)
    begin : rdAddr0_2_process
      if (rst_n == 1'b0) begin
        rdAddr1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdAddr1 <= rdAddr0_1;
        end
      end
    end

  assign rdAddrEndNonZero = rdAddr1 != 4'b0000;

  assign rdAddrEndZero =  ~ rdAddrEndNonZero;

  always @(posedge clk)
    begin : finalSumValidPipe_process
      if (rst_n == 1'b0) begin
        finalSumValidPipe_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg[0] <= rdAddrEndZero;
          finalSumValidPipe_reg[32'sd3:32'sd1] <= finalSumValidPipe_reg[32'sd2:32'sd0];
        end
      end
    end

  assign accumulate = finalSumValidPipe_reg[3];

  assign accDataOut = 32'sb00000000000000000000000000000000;

  assign accSwitchOut = (accumulate == 1'b0 ? sumOut :
              accDataOut);

  FilterTapSystolicPreAdd_block1 u_filterTap0 (.clk(clk),
                                               .enb(enb),
                                               .din_re(delayLineDataOut0),  // sfix16_En15
                                               .preAddIn(delayLineDataOut1),  // sfix16_En15
                                               .coeff(coeffTableReg0_1),  // sfix16_En15
                                               .sumIn(accSwitchOut),  // sfix32_En30
                                               .sumOut(sumOut)  // sfix32_En30
                                               );

  assign converterOut = sumOut[30:15];

  always @(posedge clk)
    begin : dout_re_process
      if (rst_n == 1'b0) begin
        dout_re_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && validOutLookahead_1) begin
          dout_re_1 <= converterOut;
        end
      end
    end

  assign dataZero = 16'sb0000000000000000;

  assign dataOut = (notValid == 1'b0 ? dout_re_1 :
              dataZero);

  assign validOut = vldOut_1;

endmodule  // Halfband_Filter_2


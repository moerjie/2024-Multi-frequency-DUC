// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\DitherGen.v
// Created: 2025-04-03 15:54:05
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DitherGen
// Source Path: DUC/AM_MultiBaseband_module/Carry1/Carrier_1/DitherGen
// Hierarchy Level: 3
// Model version: 3.93
// 
// Internal Dither Generation Component
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DitherGen
          (clk,
           rst_n,
           enb,
           validIn,
           dither);


  input   clk;
  input   rst_n;
  input   enb;
  input   validIn;
  output  [14:0] dither;  // ufix15


  wire [18:0] pn_newvalue14;  // ufix19
  wire [17:0] pn_newvaluesf14;  // ufix18
  wire bit0_14;  // ufix1
  wire bit14_14;  // ufix1
  wire bit17_14;  // ufix1
  wire [18:0] pn_newvalue13;  // ufix19
  wire [17:0] pn_newvaluesf13;  // ufix18
  wire bit0_13;  // ufix1
  wire bit14_13;  // ufix1
  wire bit17_13;  // ufix1
  wire [18:0] pn_newvalue12;  // ufix19
  wire [17:0] pn_newvaluesf12;  // ufix18
  wire bit0_12;  // ufix1
  wire bit14_12;  // ufix1
  wire bit17_12;  // ufix1
  wire [18:0] pn_newvalue11;  // ufix19
  wire [17:0] pn_newvaluesf11;  // ufix18
  wire bit0_11;  // ufix1
  wire bit14_11;  // ufix1
  wire bit17_11;  // ufix1
  wire [18:0] pn_newvalue10;  // ufix19
  wire [17:0] pn_newvaluesf10;  // ufix18
  wire bit0_10;  // ufix1
  wire bit14_10;  // ufix1
  wire bit17_10;  // ufix1
  wire [18:0] pn_newvalue9;  // ufix19
  wire [17:0] pn_newvaluesf9;  // ufix18
  wire bit0_9;  // ufix1
  wire bit14_9;  // ufix1
  wire bit17_9;  // ufix1
  wire [18:0] pn_newvalue8;  // ufix19
  wire [17:0] pn_newvaluesf8;  // ufix18
  wire bit0_8;  // ufix1
  wire bit14_8;  // ufix1
  wire bit17_8;  // ufix1
  wire [18:0] pn_newvalue7;  // ufix19
  wire [17:0] pn_newvaluesf7;  // ufix18
  wire bit0_7;  // ufix1
  wire bit14_7;  // ufix1
  wire bit17_7;  // ufix1
  wire [18:0] pn_newvalue6;  // ufix19
  wire [17:0] pn_newvaluesf6;  // ufix18
  wire bit0_6;  // ufix1
  wire bit14_6;  // ufix1
  wire bit17_6;  // ufix1
  wire [18:0] pn_newvalue5;  // ufix19
  wire [17:0] pn_newvaluesf5;  // ufix18
  wire bit0_5;  // ufix1
  wire bit14_5;  // ufix1
  wire bit17_5;  // ufix1
  wire [18:0] pn_newvalue4;  // ufix19
  wire [17:0] pn_newvaluesf4;  // ufix18
  wire bit0_4;  // ufix1
  wire bit14_4;  // ufix1
  wire bit17_4;  // ufix1
  wire [18:0] pn_newvalue3;  // ufix19
  wire [17:0] pn_newvaluesf3;  // ufix18
  wire bit0_3;  // ufix1
  wire bit14_3;  // ufix1
  wire bit17_3;  // ufix1
  wire [18:0] pn_newvalue2;  // ufix19
  wire [17:0] pn_newvaluesf2;  // ufix18
  wire bit0_2;  // ufix1
  wire bit14_2;  // ufix1
  wire bit17_2;  // ufix1
  wire [18:0] pn_newvalue1;  // ufix19
  wire [17:0] pn_newvaluesf1;  // ufix18
  wire bit0_1;  // ufix1
  wire bit14_1;  // ufix1
  wire bit17_1;  // ufix1
  reg [18:0] pn_reg;  // ufix19
  wire [17:0] pn_newvaluesf0;  // ufix18
  wire bit14_0;  // ufix1
  wire bit17_0;  // ufix1
  wire bit18_0;  // ufix1
  wire bit0_0;  // ufix1
  wire xorout0;  // ufix1
  wire bit18_1;  // ufix1
  wire xorout1;  // ufix1
  wire bit18_2;  // ufix1
  wire xorout2;  // ufix1
  wire bit18_3;  // ufix1
  wire xorout3;  // ufix1
  wire bit18_4;  // ufix1
  wire xorout4;  // ufix1
  wire bit18_5;  // ufix1
  wire xorout5;  // ufix1
  wire bit18_6;  // ufix1
  wire xorout6;  // ufix1
  wire bit18_7;  // ufix1
  wire xorout7;  // ufix1
  wire bit18_8;  // ufix1
  wire xorout8;  // ufix1
  wire bit18_9;  // ufix1
  wire xorout9;  // ufix1
  wire bit18_10;  // ufix1
  wire xorout10;  // ufix1
  wire bit18_11;  // ufix1
  wire xorout11;  // ufix1
  wire bit18_12;  // ufix1
  wire xorout12;  // ufix1
  wire bit18_13;  // ufix1
  wire xorout13;  // ufix1
  wire bit18_14;  // ufix1
  wire xorout14;  // ufix1
  wire [18:0] pn_newvalue15;  // ufix19


  assign pn_newvaluesf14 = pn_newvalue14[18:1];

  assign bit0_14 = pn_newvalue14[0];

  assign bit14_14 = pn_newvalue14[14];

  assign bit17_14 = pn_newvalue14[17];

  assign pn_newvaluesf13 = pn_newvalue13[18:1];

  assign bit0_13 = pn_newvalue13[0];

  assign bit14_13 = pn_newvalue13[14];

  assign bit17_13 = pn_newvalue13[17];

  assign pn_newvaluesf12 = pn_newvalue12[18:1];

  assign bit0_12 = pn_newvalue12[0];

  assign bit14_12 = pn_newvalue12[14];

  assign bit17_12 = pn_newvalue12[17];

  assign pn_newvaluesf11 = pn_newvalue11[18:1];

  assign bit0_11 = pn_newvalue11[0];

  assign bit14_11 = pn_newvalue11[14];

  assign bit17_11 = pn_newvalue11[17];

  assign pn_newvaluesf10 = pn_newvalue10[18:1];

  assign bit0_10 = pn_newvalue10[0];

  assign bit14_10 = pn_newvalue10[14];

  assign bit17_10 = pn_newvalue10[17];

  assign pn_newvaluesf9 = pn_newvalue9[18:1];

  assign bit0_9 = pn_newvalue9[0];

  assign bit14_9 = pn_newvalue9[14];

  assign bit17_9 = pn_newvalue9[17];

  assign pn_newvaluesf8 = pn_newvalue8[18:1];

  assign bit0_8 = pn_newvalue8[0];

  assign bit14_8 = pn_newvalue8[14];

  assign bit17_8 = pn_newvalue8[17];

  assign pn_newvaluesf7 = pn_newvalue7[18:1];

  assign bit0_7 = pn_newvalue7[0];

  assign bit14_7 = pn_newvalue7[14];

  assign bit17_7 = pn_newvalue7[17];

  assign pn_newvaluesf6 = pn_newvalue6[18:1];

  assign bit0_6 = pn_newvalue6[0];

  assign bit14_6 = pn_newvalue6[14];

  assign bit17_6 = pn_newvalue6[17];

  assign pn_newvaluesf5 = pn_newvalue5[18:1];

  assign bit0_5 = pn_newvalue5[0];

  assign bit14_5 = pn_newvalue5[14];

  assign bit17_5 = pn_newvalue5[17];

  assign pn_newvaluesf4 = pn_newvalue4[18:1];

  assign bit0_4 = pn_newvalue4[0];

  assign bit14_4 = pn_newvalue4[14];

  assign bit17_4 = pn_newvalue4[17];

  assign pn_newvaluesf3 = pn_newvalue3[18:1];

  assign bit0_3 = pn_newvalue3[0];

  assign bit14_3 = pn_newvalue3[14];

  assign bit17_3 = pn_newvalue3[17];

  assign pn_newvaluesf2 = pn_newvalue2[18:1];

  assign bit0_2 = pn_newvalue2[0];

  assign bit14_2 = pn_newvalue2[14];

  assign bit17_2 = pn_newvalue2[17];

  assign pn_newvaluesf1 = pn_newvalue1[18:1];

  assign bit0_1 = pn_newvalue1[0];

  assign bit14_1 = pn_newvalue1[14];

  assign bit17_1 = pn_newvalue1[17];

  assign pn_newvaluesf0 = pn_reg[18:1];

  assign bit14_0 = pn_reg[14];

  assign bit17_0 = pn_reg[17];

  assign bit18_0 = pn_reg[18];

  // Stage1: Compute register output and shift
  assign xorout0 = bit0_0 ^ (bit14_0 ^ (bit18_0 ^ bit17_0));

  assign pn_newvalue1 = {xorout0, pn_newvaluesf0};

  assign bit18_1 = pn_newvalue1[18];

  // Stage2: Compute register output and shift
  assign xorout1 = bit0_1 ^ (bit14_1 ^ (bit18_1 ^ bit17_1));

  assign pn_newvalue2 = {xorout1, pn_newvaluesf1};

  assign bit18_2 = pn_newvalue2[18];

  // Stage3: Compute register output and shift
  assign xorout2 = bit0_2 ^ (bit14_2 ^ (bit18_2 ^ bit17_2));

  assign pn_newvalue3 = {xorout2, pn_newvaluesf2};

  assign bit18_3 = pn_newvalue3[18];

  // Stage4: Compute register output and shift
  assign xorout3 = bit0_3 ^ (bit14_3 ^ (bit18_3 ^ bit17_3));

  assign pn_newvalue4 = {xorout3, pn_newvaluesf3};

  assign bit18_4 = pn_newvalue4[18];

  // Stage5: Compute register output and shift
  assign xorout4 = bit0_4 ^ (bit14_4 ^ (bit18_4 ^ bit17_4));

  assign pn_newvalue5 = {xorout4, pn_newvaluesf4};

  assign bit18_5 = pn_newvalue5[18];

  // Stage6: Compute register output and shift
  assign xorout5 = bit0_5 ^ (bit14_5 ^ (bit18_5 ^ bit17_5));

  assign pn_newvalue6 = {xorout5, pn_newvaluesf5};

  assign bit18_6 = pn_newvalue6[18];

  // Stage7: Compute register output and shift
  assign xorout6 = bit0_6 ^ (bit14_6 ^ (bit18_6 ^ bit17_6));

  assign pn_newvalue7 = {xorout6, pn_newvaluesf6};

  assign bit18_7 = pn_newvalue7[18];

  // Stage8: Compute register output and shift
  assign xorout7 = bit0_7 ^ (bit14_7 ^ (bit18_7 ^ bit17_7));

  assign pn_newvalue8 = {xorout7, pn_newvaluesf7};

  assign bit18_8 = pn_newvalue8[18];

  // Stage9: Compute register output and shift
  assign xorout8 = bit0_8 ^ (bit14_8 ^ (bit18_8 ^ bit17_8));

  assign pn_newvalue9 = {xorout8, pn_newvaluesf8};

  assign bit18_9 = pn_newvalue9[18];

  // Stage10: Compute register output and shift
  assign xorout9 = bit0_9 ^ (bit14_9 ^ (bit18_9 ^ bit17_9));

  assign pn_newvalue10 = {xorout9, pn_newvaluesf9};

  assign bit18_10 = pn_newvalue10[18];

  // Stage11: Compute register output and shift
  assign xorout10 = bit0_10 ^ (bit14_10 ^ (bit18_10 ^ bit17_10));

  assign pn_newvalue11 = {xorout10, pn_newvaluesf10};

  assign bit18_11 = pn_newvalue11[18];

  // Stage12: Compute register output and shift
  assign xorout11 = bit0_11 ^ (bit14_11 ^ (bit18_11 ^ bit17_11));

  assign pn_newvalue12 = {xorout11, pn_newvaluesf11};

  assign bit18_12 = pn_newvalue12[18];

  // Stage13: Compute register output and shift
  assign xorout12 = bit0_12 ^ (bit14_12 ^ (bit18_12 ^ bit17_12));

  assign pn_newvalue13 = {xorout12, pn_newvaluesf12};

  assign bit18_13 = pn_newvalue13[18];

  // Stage14: Compute register output and shift
  assign xorout13 = bit0_13 ^ (bit14_13 ^ (bit18_13 ^ bit17_13));

  assign pn_newvalue14 = {xorout13, pn_newvaluesf13};

  assign bit18_14 = pn_newvalue14[18];

  // Stage15: Compute register output and shift
  assign xorout14 = bit0_14 ^ (bit14_14 ^ (bit18_14 ^ bit17_14));

  assign pn_newvalue15 = {xorout14, pn_newvaluesf14};

  // PNgen register
  always @(posedge clk)
    begin : PNgenRegister_process
      if (rst_n == 1'b0) begin
        pn_reg <= 19'b0000000000000000001;
      end
      else begin
        if (enb && validIn) begin
          pn_reg <= pn_newvalue15;
        end
      end
    end

  assign bit0_0 = pn_reg[0];

  // Dither Output
  assign dither = {bit0_0, bit0_1, bit0_2, bit0_3, bit0_4, bit0_5, bit0_6, bit0_7, bit0_8, bit0_9, bit0_10, bit0_11, bit0_12, bit0_13, bit0_14};

endmodule  // DitherGen


// -------------------------------------------------------------
// 
// File Name: hdlsrc\DUC\Addressable_Delay_Line.v
// Created: 2025-03-29 15:53:02
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Addressable_Delay_Line
// Source Path: DUC/DUC_module_with_ready/CIC_Comp Filter 1/Addressable_Delay_Line
// Hierarchy Level: 2
// Model version: 3.89
// 
// Addressable Delay Line
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Addressable_Delay_Line
          (clk,
           rst_n,
           enb,
           dataIn,
           wrEn,
           wrAddr,
           rdAddr,
           delayLineEnd,
           dataOut);


  input   clk;
  input   rst_n;
  input   enb;
  input   signed [15:0] dataIn;  // sfix16_En15
  input   wrEn;
  input   [4:0] wrAddr;  // ufix5
  input   [4:0] rdAddr;  // ufix5
  output  signed [15:0] delayLineEnd;  // sfix16_En15
  output  signed [15:0] dataOut;  // sfix16_En15


  wire saveLast;
  reg  dataEndEn;
  wire wrEnN;
  wire dataEndEnS;
  wire signed [15:0] delayedSignals;  // sfix16_En15
  reg signed [15:0] delayLineEnd_1;  // sfix16_En15


  assign saveLast = wrAddr == rdAddr;

  always @(posedge clk)
    begin : dataOutReg_process
      if (rst_n == 1'b0) begin
        dataEndEn <= 1'b0;
      end
      else begin
        if (enb) begin
          dataEndEn <= saveLast;
        end
      end
    end

  assign wrEnN =  ~ dataEndEn;

  assign dataEndEnS = saveLast & wrEnN;

  SimpleDualPortRAM_generic #(.AddrWidth(5),
                              .DataWidth(16)
                              )
                            u_simpleDualPortRam_generic (.clk(clk),
                                                         .enb(enb),
                                                         .wr_din(dataIn),
                                                         .wr_addr(wrAddr),
                                                         .wr_en(wrEn),
                                                         .rd_addr(rdAddr),
                                                         .dout(delayedSignals)
                                                         );

  always @(posedge clk)
    begin : dataOutReg_1_process
      if (rst_n == 1'b0) begin
        delayLineEnd_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && dataEndEnS) begin
          delayLineEnd_1 <= delayedSignals;
        end
      end
    end

  assign dataOut = delayedSignals;

  assign delayLineEnd = delayLineEnd_1;

endmodule  // Addressable_Delay_Line

